{"version":3,"sources":["components/main_example/loader.jsx","components/main_example/post.jsx","components/main_example/notif.jsx","components/main_example/sort.jsx","components/main_example/index.jsx","App.js","serviceWorker.js","index.js"],"names":["Loader","className","PureComponent","Post","props","handleOnClick","setActivePost","index","state","loaded","title","body","id","this","setState","data","replace","active","onClick","removePost","Fragment","type","defaultValue","onChange","e","target","value","placeholder","Notif","setTimeout","setShowNotif","show","style","background","color","text","Sort","useState","sortType","setSortType","useEffect","posts","sort","a","b","localeCompare","setData","Index","activePost","notif","setNotif","showNotif","error","setError","fetch","then","response","json","items","targetPost","find","item","splice","indexOf","handleNotif","newPost","userId","ids","map","Math","max","handlePostId","newData","addNewPost","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3ca406f6.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\n\nclass Loader extends PureComponent {\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"loader\">\n\t\t\t\t...\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Loader;","import React from 'react';\nimport Loader from './loader';\nimport { PureComponent } from 'react';\n\nclass Post extends PureComponent {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tloaded: false,\n\t\t\ttitle: '',\n\t\t\tbody: '',\n\t\t\tid: ''\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.setState({\n\t\t\tloaded: true,\n\t\t\ttitle: this.props.data.title,\n\t\t\tbody: this.props.data.body.replace(/\\n/g, ' '),\n\t\t\tid: this.props.data.id\n\t\t});\n\t}\n\n\thandleOnClick = () => {\n\t\tthis.props.setActivePost(this.props.index);\n\t};\n\n\trender() {\n\t\tif (this.state.loaded) {\n\t\t\treturn (\n\t\t\t\t<div className={`post ${this.props.active && 'post--active'}`} onClick={this.handleOnClick}>\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"post__remove\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tthis.props.removePost(this.props.index);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t×\n\t\t\t\t\t</button>\n\t\t\t\t\t<small>ID: {this.state.id}</small>\n\t\t\t\t\t{!this.props.active ? (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<h3>{this.state.title}</h3>\n\t\t\t\t\t\t\t<p>{this.state.body}</p>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<React.Fragment>\n\t\t\t\t\t\t\t<h3>\n\t\t\t\t\t\t\t\t<input\n\t\t\t\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\t\t\t\tdefaultValue={this.state.title}\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ title: e.target.value });\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tplaceholder={'Dodaj naslov'}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</h3>\n\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t<textarea\n\t\t\t\t\t\t\t\t\tonChange={(e) => {\n\t\t\t\t\t\t\t\t\t\tthis.setState({ body: e.target.value });\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t\tdefaultValue={this.state.body}\n\t\t\t\t\t\t\t\t\tplaceholder={'Dodaj opis'}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</React.Fragment>\n\t\t\t\t\t)}\n\t\t\t\t</div>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <Loader />;\n\t\t}\n\t}\n}\n\nexport default Post;\n","import React, { PureComponent } from 'react';\n\nclass Notif extends PureComponent {\n\n\tcomponentDidUpdate() {\n\t\tsetTimeout(() => {\n\t\t\tthis.props.setShowNotif(false);\n\t\t}, 3000);\n\t}\n\n\trender() {\n\t\tif (this.props.show) {\n\t\t\treturn <div style={{background: this.props.color}} className=\"notif\">{this.props.text}</div>;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n\nexport default Notif;\n","import React from 'react';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\n\nfunction Sort(props) {\n\tconst [ sortType, setSortType ] = useState({\n\t\ttype: 'id',\n\t\tvalue: false\n\t});\n\n\tuseEffect(\n\t\t() => {\n\t\t\tlet posts = [ ...props.data ];\n\n\t\t\tif (sortType.type === 'id') {\n\t\t\t\tsortType.value ? posts.sort((a, b) => a.id - b.id) : posts.sort((a, b) => b.id - a.id);\n\t\t\t} else {\n\t\t\t\tsortType.value\n\t\t\t\t\t? posts.sort((a, b) => a.title.localeCompare(b.title))\n\t\t\t\t\t: posts.sort((a, b) => b.title.localeCompare(a.title));\n\t\t\t}\n\n\t\t\tprops.setData(posts);\n\t\t},\n\t\t[ sortType ]\n\t);\n\n\tconst sortById = () => {\n\t\tsetSortType({\n\t\t\ttype: 'id',\n\t\t\tvalue: !sortType.value\n\t\t});\n\t};\n\n\tconst sortByAlphabet = () => {\n\t\tsetSortType({\n\t\t\ttype: 'letter',\n\t\t\tvalue: !sortType.value\n\t\t});\n\t};\n\n\treturn (\n\t\t<div className=\"sort\">\n\t\t\t<div>\n\t\t\t\tPoredak:&nbsp;\n\t\t\t\t<strong>\n\t\t\t\t\t{sortType.type === 'letter' ? (\n\t\t\t\t\t\t<span>{sortType.value ? <span>A-Ž</span> : <span>Ž-A</span>}</span>\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<span>{sortType.value ? <span>1-10</span> : <span>10-1</span>}</span>\n\t\t\t\t\t)}\n\t\t\t\t</strong>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<button\n\t\t\t\t\tclassName={`btn btn--sort ${sortType.type === 'letter' ? 'btn--active' : ''}`}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsortByAlphabet();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tAbecedno\n\t\t\t\t</button>\n\t\t\t\t<button\n\t\t\t\t\tclassName={`btn btn--sort ${sortType.type === 'id' ? 'btn--active' : ''}`}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\tsortById();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tPrema starosti\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport default Sort;\n","import React, { useState, useEffect } from 'react';\nimport Post from './post';\nimport Loader from './loader';\nimport Notif from './notif';\nimport Sort from './sort';\n\nconst Index = () => {\n\tconst [ data, setData ] = useState(null);\n\tconst [ activePost, setActivePost ] = useState(null);\n\tconst [ notif, setNotif ] = useState({ text: '', type: '', color: '' });\n\tconst [ showNotif, setShowNotif ] = useState(false);\n\tconst [ error, setError ] = useState(null);\n\n\tconst fetchData = () => {\n\t\tfetch('https://jsonplaceholder.typicode.com/posts').then((response) => response.json()).then(\n\t\t\t(json) => setData(json),\n\t\t\t(error) => {\n\t\t\t\tsetError(error);\n\t\t\t}\n\t\t);\n\t};\n\t\n\tuseEffect(() => {\n\t\tfetchData()\n\t}, []);\n\n\tconst addNewPost = () => {\n\t\tconst handlePostId = (items) => {\n\t\t\tlet ids = items.map((item) => item.id);\n\t\t\treturn (ids = Math.max(...ids) + 1);\n\t\t};\n\n\t\tlet posts = [ ...data ];\n\t\tlet newPost = {\n\t\t\tuserId: 1,\n\t\t\tid: handlePostId(posts),\n\t\t\ttitle: 'Nova objava',\n\t\t\tbody: ''\n\t\t};\n\n\t\tlet newData = [ newPost, ...data ];\n\t\thandleNotif(`Dodana nova objava: ID: ${newPost.id}`, 'add', '#4CAF50');\n\t\tsetData(newData);\n\t};\n\n\tconst removePost = (index) => {\n\t\tlet posts = [ ...data ];\n\t\tlet targetPost = posts.find((item) => item.id === index);\n\t\tposts.splice(posts.indexOf(targetPost), 1);\n\t\thandleNotif(`Obrisana objava: ID: ${targetPost.id}`, 'remove', '#');\n\t\tsetData(posts);\n\t};\n\n\tconst handleNotif = (text, type, color) => {\n\t\tsetNotif({\n\t\t\ttext: text,\n\t\t\ttype: type,\n\t\t\tcolor: color\n\t\t});\n\t\tsetShowNotif(true);\n\t};\n\n\tconst mapData = (items) => {\n\t\treturn (\n\t\t\titems &&\n\t\t\titems.map((item, index) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Post\n\t\t\t\t\t\tkey={item.id}\n\t\t\t\t\t\tindex={item.id}\n\t\t\t\t\t\tdata={item}\n\t\t\t\t\t\tactive={activePost === item.id}\n\t\t\t\t\t\tsetActivePost={setActivePost}\n\t\t\t\t\t\tremovePost={removePost}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t})\n\t\t);\n\t};\n\n\tif (!error) {\n\t\tif (data) {\n\t\t\treturn (\n\t\t\t\t<React.Fragment>\n\t\t\t\t\t<div className=\"layout\">\n\t\t\t\t\t\t<div className=\"row\">\n\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\tclassName=\"btn\"\n\t\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\t\taddNewPost();\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\tDodaj\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t<Sort data={data} setData={setData} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"posts\">{mapData(data)}</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t<Notif text={notif.text} type={notif.type} show={showNotif} setShowNotif={setShowNotif} />\n\t\t\t\t</React.Fragment>\n\t\t\t);\n\t\t} else {\n\t\t\treturn <Loader />;\n\t\t}\n\t} else {\n\t\treturn <div>Dogodila se greška! {error}</div>;\n\t}\n};\n\nexport default Index;\n","import React from 'react';\nimport './App.scss';\n//import KlasnaKomponenta from './components/basic_examples/class_component';\n//import FunkcijskaKomponenta from './components/basic_examples/function_component';\n//import KlasnaKomponentaLifeCycle from './components/basic_examples/class_component_lifecycle';\n//import NestedComponentExample from './components/basic_examples/nesting_example';\n//import FunctionComponentLifecycle from './components/basic_examples/function_component_lifecycle';\n//import InteractionExample from './components/basic_examples/interaction_example';\n//import ComplexData from './components/main_example';\n//import Fragments from './components/fragments'\n//import Update from './components/should_component_update'\n//import Immutability from './components/immutability'\n//import Conditional from './components/conditional_rendering'\n\nimport MainExample from './components/main_example'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Diplomski rad</h1>\n        <h2>Nikola Milić</h2>\n      </header>\n      <article>\n        <MainExample />\n        {/* <section>\n          <small>Osnovni primjeri komponenti</small>\n          <KlasnaKomponenta value=\"Props klasne komponente\" />\n          <FunkcijskaKomponenta value=\"Props function komponente\" />\n        </section>\n        <section>\n          <small>Osnovni primjeri podkomponenti</small>\n          <NestedComponentExample value=\"Props \t komponente\" />\n\t\t\t\t\t<InteractionExample />\n        </section>\n        <section>\n          <small>Životni ciklus komponente</small>\n          <KlasnaKomponentaLifeCycle value={\"Props lifecycle class komponente\"} />\n          <FunctionComponentLifecycle value={\"Props lifecycle class komponente\"} />\n        </section>\n        <section>\n          <small>React.Fragment</small>\n\t\t\t\t\t<Fragments />\n        </section>\n\t\t\t\t<section>\n          <small>shouldComponentUpdate primjer</small>\n\t\t\t\t\t<Update />\n        </section>\n        <section>\n          <small>Immutabiltity</small>\n\t\t\t\t\t<Immutability />\n        </section>\n        <section>\n          <small>Immutabiltity</small>\n\t\t\t\t\t<Immutability />\n        </section>\n\t\t\t\t<section>\n          <small>Kompleksni podaci</small>\n          <ComplexData />\n        </section> */}\n      </article>\n    </div>\n  );\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}